type Values<T> = T[keyof T];
export type Mnemonic = Values<typeof Mnemonics>;
export type Size = Values<typeof Sizes>;
export type AddressingMode = Values<typeof AddressingModes>;

export const Mnemonics = {
  ABCD: "ABCD",
  ADD: "ADD",
  ADDA: "ADDA",
  ADDI: "ADDI",
  ADDQ: "ADDQ",
  ADDX: "ADDX",
  AND: "AND",
  ANDI: "ANDI",
  ASL: "ASL",
  ASR: "ASR",
  BCC: "BCC",
  BCHG: "BCHG",
  BCLR: "BCLR",
  BCS: "BCS",
  BEQ: "BEQ",
  BGE: "BGE",
  BGT: "BGT",
  BHI: "BHI",
  BLE: "BLE",
  BLT: "BLT",
  BMI: "BMI",
  BNE: "BNE",
  BPL: "BPL",
  BRA: "BRA",
  BSET: "BSET",
  BSR: "BSR",
  BTST: "BTST",
  BVC: "BVC",
  BVS: "BVS",
  CHK: "CHK",
  CLR: "CLR",
  CMP: "CMP",
  CMPA: "CMPA",
  CMPI: "CMPI",
  CMPM: "CMPM",
  DBCC: "DBCC",
  DBCS: "DBCS",
  DBEQ: "DBEQ",
  DBF: "DBF",
  DBGE: "DBGE",
  DBGT: "DBGT",
  DBHI: "DBHI",
  DBLE: "DBLE",
  DBLT: "DBLT",
  DBMI: "DBMI",
  DBNE: "DBNE",
  DBPL: "DBPL",
  DBT: "DBT",
  DBVC: "DBVC",
  DBVS: "DBVS",
  DIVS: "DIVS",
  DIVU: "DIVU",
  EOR: "EOR",
  EORI: "EORI",
  EXG: "EXG",
  EXT: "EXT",
  JMP: "JMP",
  JSR: "JSR",
  LEA: "LEA",
  LINK: "LINK",
  LSL: "LSL",
  LSR: "LSR",
  MOVE: "MOVE",
  MOVEA: "MOVEA",
  MOVEM: "MOVEM",
  MOVEP: "MOVEP",
  MOVEQ: "MOVEQ",
  MULS: "MULS",
  MULU: "MULU",
  NBCD: "NBCD",
  NEG: "NEG",
  NEGX: "NEGX",
  NOP: "NOP",
  NOT: "NOT",
  OR: "OR",
  ORI: "ORI",
  PEA: "PEA",
  RESET: "RESET",
  ROL: "ROL",
  ROR: "ROR",
  ROXL: "ROXL",
  ROXR: "ROXR",
  RTE: "RTE",
  RTR: "RTR",
  RTS: "RTS",
  SBCD: "SBCD",
  SCC: "SCC",
  SCS: "SCS",
  SEQ: "SEQ",
  SGE: "SGE",
  SGT: "SGT",
  SHI: "SHI",
  SLE: "SLE",
  SLT: "SLT",
  SMI: "SMI",
  SNE: "SNE",
  SPL: "SPL",
  STOP: "STOP",
  SUB: "SUB",
  SUBA: "SUBA",
  SUBI: "SUBI",
  SUBQ: "SUBQ",
  SUBX: "SUBX",
  SVC: "SVC",
  SVS: "SVS",
  SWAP: "SWAP",
  TAS: "TAS",
  TRAP: "TRAP",
  TRAPV: "TRAPV",
  TST: "TST",
  UNLK: "UNLK",
} as const;

export function isMnemonic(v: string): v is Mnemonic {
  return Mnemonics[v as Mnemonic] !== undefined;
}

export const Sizes = {
  B: "B",
  W: "W",
  L: "L",
} as const;

export function isSize(v: string): v is Size {
  return Sizes[v as Size] !== undefined;
}

export const AddressingModes = {
  Dn: "Dn",
  An: "An",
  AnIndir: "(An)",
  AnPostInc: "(An)+",
  AnPreDec: "-(An)",
  AnDisp: "d(An)",
  AnDispIx: "d(An,ix)",
  PcDisp: "d(PC)",
  PcDispIx: "d(PC,ix)",
  AbsW: "xxx.W",
  AbsL: "xxx.L",
  RegList: "RegList",
  Imm: "#xxx",
} as const;

// Groups

export type MnemonicGroup = "BCC" | "DBCC" | "SCC" | "SHIFT";

export const mnemonicGroups: Record<MnemonicGroup, Mnemonic[]> = {
  SCC: [
    Mnemonics.SCC,
    Mnemonics.SCS,
    Mnemonics.SEQ,
    Mnemonics.SGE,
    Mnemonics.SGT,
    Mnemonics.SHI,
    Mnemonics.SLE,
    Mnemonics.SLT,
    Mnemonics.SMI,
    Mnemonics.SNE,
    Mnemonics.SPL,
    Mnemonics.SVC,
    Mnemonics.SVS,
  ],
  BCC: [
    Mnemonics.BCC,
    Mnemonics.BCS,
    Mnemonics.BEQ,
    Mnemonics.BGE,
    Mnemonics.BGT,
    Mnemonics.BHI,
    Mnemonics.BLE,
    Mnemonics.BLT,
    Mnemonics.BMI,
    Mnemonics.BNE,
    Mnemonics.BPL,
    Mnemonics.BVC,
    Mnemonics.BVS,
  ],
  DBCC: [
    Mnemonics.DBCC,
    Mnemonics.DBCS,
    Mnemonics.DBEQ,
    Mnemonics.DBF,
    Mnemonics.DBGE,
    Mnemonics.DBGT,
    Mnemonics.DBHI,
    Mnemonics.DBLE,
    Mnemonics.DBLT,
    Mnemonics.DBMI,
    Mnemonics.DBNE,
    Mnemonics.DBPL,
    Mnemonics.DBT,
    Mnemonics.DBVC,
    Mnemonics.DBVS,
  ],
  SHIFT: [
    Mnemonics.LSL,
    Mnemonics.LSR,
    Mnemonics.ASL,
    Mnemonics.ASR,
    Mnemonics.ROL,
    Mnemonics.ROR,
    Mnemonics.ROXL,
    Mnemonics.ROXR,
  ],
};

export type AddressingModeGroup = "EA" | "DI" | "M";

export const addressingModeGroups: Record<
  AddressingModeGroup,
  AddressingMode[]
> = {
  EA: [
    AddressingModes.Dn,
    AddressingModes.An,
    AddressingModes.AnIndir,
    AddressingModes.AnPostInc,
    AddressingModes.AnPreDec,
    AddressingModes.AnDisp,
    AddressingModes.AnDispIx,
    AddressingModes.PcDisp,
    AddressingModes.PcDispIx,
    AddressingModes.AbsW,
    AddressingModes.AbsL,
    AddressingModes.Imm,
  ],
  DI: [AddressingModes.Dn, AddressingModes.An, AddressingModes.Imm],
  M: [
    AddressingModes.AnIndir,
    AddressingModes.AnPostInc,
    AddressingModes.AnPreDec,
    AddressingModes.AnDisp,
    AddressingModes.AnDispIx,
    AddressingModes.PcDisp,
    AddressingModes.PcDispIx,
    AddressingModes.AbsW,
    AddressingModes.AbsL,
  ],
};
